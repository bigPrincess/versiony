/**
 * Utilities to help with testing versiony
 */

'use strict'

const expect = require('chai').expect
const cpExec = require('child_process').exec
const path = require('path')
const Promise = require('promise')
const exec = Promise.denodeify(cpExec)
const sinon = require('sinon')

/**
 * Create a full path to the given fixture filename
 * @param {String} filename - the filename of the fixture
 * @returns {String} the full path to the fixture
 */
function getFullPath (filename) {
  return path.join(process.cwd(), filename)
}

/**
 * Create the command we'll pass to exec() to read the current version from a particular config file
 * @param {String} filename - the filename to get the version from
 * @returns {String} the command to pass to `exec()`
 */
function createGetVersionCmd (filename) {
  const fullPath = getFullPath(filename)
  return `node -e "console.log(require('${fullPath}').version)"`
}

/**
 * Create a json file with the given version and filename (in the cwd)
 * @param {String} filename - the name of the file to create
 * @param {String} version - the version to put into the file
 * @returns {Promise} a promise resolved when the file is created
 */
function createFileWithVersion (filename, version) {
  const fullPath = getFullPath(filename)
  return exec(`echo '{"version": "${version}"}' > ${fullPath}`)
}

/**
 * Delete a file (probably generated by createFileWithVersion())
 * @param {String} filename - the name of the file to delete (relative to cwd)
 * @returns {Promise} a promise resolved when the file is deleted
 */
function deleteFile (filename) {
  const fullPath = getFullPath(filename)
  return exec(`rm -rf ${fullPath}`)
}

/**
 * Get the version from the given file
 * @param {String} filename - the name of the file to get the version for
 * @returns {Promise} a promise resolved with the version string
 */
function getVersion (filename) {
  const getVersionCmd = createGetVersionCmd(filename)
  return exec(getVersionCmd)
    .then((stdout) => {
      return stdout.replace('\n', '')
    })
}

/**
 * Helper to make it easier to expect specific bumps after certain things happen
 * @param {Object} ctx - the test context
 * @param {String} ctx.filename - the filename being modified
 * @param {String} ctx.v - the versiony instance being tested
 * @param {String} description - the description of the scenario
 * @param {String} expectedVersion - the new version expected
 * @param {Function} callback - the callback where the actual code under test goes
 */
function itShouldBecomeWhen (ctx, description, expectedVersion, callback) {
  describe(`when ${description}`, function () {
    let version
    beforeEach(function () {
      callback()
      sinon.stub(console, 'log')
      ctx.v.to(ctx.filename).end()
      console.log.restore()
      return getVersion(ctx.filename)
        .then((newVersion) => {
          version = newVersion
        })
    })

    it(`should update the version to "${expectedVersion}"`, function () {
      expect(version).to.equal(expectedVersion)
    })
  })
}

module.exports = {
  createFileWithVersion,
  deleteFile,
  getVersion,
  itShouldBecomeWhen
}
